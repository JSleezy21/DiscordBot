import nmap
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def scan_ip(ip_address):
    """
    Performs a vulnerability scan against an IP address.
    :param ip_address: The IP address to scan.
    :return: A string containing scan results or an error message.
    """
    try:
        # Initialize the Nmap scanner
        nm = nmap.PortScanner()
        logger.info(f"Starting scan on IP: {ip_address}")

        # Run the scan
        nm.scan(ip_address, arguments='-sV --script=vuln')

        # Check if the host is up
        if ip_address not in nm.all_hosts():
            logger.warning(f"Host {ip_address} is down or unreachable.")
            return f"Host {ip_address} is down or unreachable."

        # Extract scan results
        scan_results = f"Vulnerability Scan for {ip_address}:\n"
        for proto in nm[ip_address].all_protocols():
            ports = nm[ip_address][proto].keys()
            for port in sorted(ports):
                service = nm[ip_address][proto][port]
                port_info = (
                    f"Port {port}/{proto}:\n"
                    f"  Service: {service['name']}\n"
                    f"  Version: {service.get('version', 'N/A')}\n"
                )
                scan_results += port_info

                # Add vulnerability information if available
                if "script" in service:
                    vulns = service["script"]
                    scan_results += f"  Vulnerabilities:\n"
                    for vuln, details in vulns.items():
                        scan_results += f"    - {vuln}: {details}\n"

        logger.info("Scan completed successfully.")
        return scan_results

    except Exception as e:
        logger.error(f"Error performing scan: {e}")
        return "An error occurred while performing the scan."
